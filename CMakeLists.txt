cmake_minimum_required(VERSION 3.1)
project(SofaPython3 VERSION 1.0)

if(PLUGIN_SOFAPYTHON)
    message(FATAL_ERROR "SofaPython3 cannot be built alongside SofaPython. Please set PLUGIN_SOFAPYTHON to OFF")
endif()
find_package(SofaFramework REQUIRED)
find_package(SofaSimulation REQUIRED)

find_package(Python 3.6 COMPONENTS Interpreter Development REQUIRED)
set(PYTHON_LIBRARIES ${Python3_LIBRARY_RELEASE})
set(PYTHON_LIBRARY ${Python3_LIBRARY_RELEASE})
set(PYTHON_INCLUDE_DIRS ${Python3_INCLUDE_DIR})
set(PYTHON_EXECUTABLE ${Python3_EXECUTABLE})


message("-- Python vars: ${PYTHON_INCLUDE_DIRS}")
message("-- Python vars: ${PYTHON_LIBRARIES}")
message("-- Python vars: ${PYTHON_LIBRARY}")

find_package(pybind11 QUIET)
if(NOT pybind11_FOUND)#
  message("-- Cannot build the python module 'Sofa', missing the pybind software to generate the bindings.")
  return()
endif()

message("-- Python vars: ${PYTHON_INCLUDE_DIRS}")
message("-- Python vars: ${PYTHON_LIBRARIES}")
message("-- Python vars: ${PYTHON_LIBRARY}")


#find_package(pybind11 QUIET)
#if(NOT pybind11_FOUND)#
#  message("-- Cannot build the python module 'Sofa', missing the pybind software to generate the bindings.")
#  return()
#endif()

set(HEADER_FILES
    src/SofaPython3/config.h
    src/SofaPython3/initModule.h
    src/SofaPython3/PythonEnvironment.h
    src/SofaPython3/PythonTest.h
    src/SofaPython3/SceneLoaderPY3.h
)

set(SOURCE_FILES
    src/SofaPython3/initModule.cpp
    src/SofaPython3/PythonEnvironment.cpp
    src/SofaPython3/PythonTest.cpp
    src/SofaPython3/SceneLoaderPY3.cpp
)

set(EXTRA_FILES
    SofaPython3Config.cmake.in
    )
    
add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES})
set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS "-DSOFA_BUILD_SOFAPYTHON3")

target_link_libraries(${PROJECT_NAME} PUBLIC SofaCore SofaSimulationCore SofaSimulationGraph)

if(CMAKE_SYSTEM_NAME STREQUAL Linux)
    # dlopen() is used on Linux for a workaround (see PythonEnvironnement.cpp)
    target_link_libraries(${PROJECT_NAME} PRIVATE dl)
endif()

target_include_directories(${PROJECT_NAME} PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/>")
target_include_directories(${PROJECT_NAME} PUBLIC "$<INSTALL_INTERFACE:include>")
target_include_directories(${PROJECT_NAME} PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/generated_doc/>")

target_link_libraries(${PROJECT_NAME} PRIVATE "${PYTHON_LIBRARY}" )
target_include_directories(${PROJECT_NAME} PRIVATE "${PYTHON_INCLUDE_DIR}")

## When installing, copy the content of the example directory into module/SofaPython3
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/examples DESTINATION modules/SofaPython3 COMPONENT resources)

## When installing, copy the target into module/SofaPython3
install(TARGETS ${PROJECT_NAME} DESTINATION modules/SofaPython3)

# Config files and install rules for pythons scripts
sofa_set_python_directory(${PROJECT_NAME} "python")

# The signature of sofa_create_package is
#     sofa_create_package(package_name, version, the_targets, <include_subdir>)
# This function assumes that there is a FooConfig.cmake.in file template in the source directory.
# This function is an all in one replacement for install(TARGET), install(EXPORT), and also add
# the example directory in the INSTALL set.
sofa_create_package(${PROJECT_NAME} ${PROJECT_VERSION} SofaPython3 "SofaPython3")

### Tests
#add_subdirectory(tests)

### Python binding
add_subdirectory(bindings)

#add_subdirectory(doc)
option(SofaPython3_GENERATE_DOC "Generate binding documentation" OFF)
set(include_dirs "-I/usr/lib64/llvm5.0/lib/clang/5.0.1/include"
    "-I${CMAKE_BINARY_DIR}/include"
    "-I${CMAKE_SOURCE_DIR}/SofaKernel/framework"
    "-I${CMAKE_CURRENT_SOURCE_DIR}/binding"
    "-I${PYTHON_INCLUDE_DIRS}")

if(SofaPython3_GENERATE_DOC)
    file(GLOB binding_headers "${CMAKE_CURRENT_SOURCE_DIR}/bindings/Sofa/src/SofaPython3/Sofa/Simulation/Binding*.h")
    #file(GLOB_RECURSE binding_headers "${CMAKE_CURRENT_SOURCE_DIR}/bindings/Binding*.h")
    #message(FATAL_ERROR  MEOW ${binding_headers})
    # -> We get expected result

    foreach(header IN ITEMS ${binding_headers})
        get_filename_component(bname ${header} NAME_WE)
        string(REGEX REPLACE ".+_" "" bname ${bname})
        set(outname "${bname}_doc.h")
        set(binded_file ${CMAKE_SOURCE_DIR}/SofaKernel/framework/sofa/simulation/${bname}.h)
        execute_process(
            COMMAND "${PYTHON_EXECUTABLE}" "${CMAKE_CURRENT_SOURCE_DIR}/doc/mkdoc.py" ${include_dirs} "${binded_file}"
            OUTPUT_FILE "${CMAKE_CURRENT_BINARY_DIR}/generated_doc/${outname}"
            RESULT_VARIABLE retcode
            ERROR_VARIABLE err)
        message("Return code ${retcode} : ${err}")
    endforeach()
else()
    # Copy already generated doc
    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/doc/generated_doc DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
endif()
install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/generated_doc DESTINATION modules/SofaPython3 COMPONENT headers)
